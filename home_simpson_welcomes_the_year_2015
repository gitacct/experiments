//
//  main.cpp
//  template_switch_case
//
//  Created by GUEST on 1/3/15.
//  Copyright (c) 2015 GUEST. All rights reserved.
//

#include <iostream>
#include <chrono>
#include <thread>

enum homer_simpson{sleep,donut,salivate,poke_him};

void homer_says(const homer_simpson what_) {
    switch (what_) {
        case sleep:
            std::cout << "Zzz~" << std::endl;
            break;
        case salivate:
            std::cout << "Hmm~" << std::endl;
            break;
        case donut:
            std::cout << "Donuts..." << std::endl;
            break;
        case poke_him:
            std::cout << "Doh!" << std::endl;
            break;
        default:
            throw ("Doh!");
            break;
    }
}
void salutation() {
    std::cout << "Happy New Year! Phew!! It's 2015, already." << std::endl;
}
template<typename T,typename... ArgT>
void salutation(T count, ArgT... counting_down) {
    std::this_thread::sleep_for(std::chrono::seconds(1));
    std::cout << count << ' ' << std::endl;
    return salutation(counting_down...);
}
int main(void) {
    const homer_simpson status[5]={sleep,salivate,sleep,donut,poke_him};
    for (int while_sleeping=0; while_sleeping<5; ++while_sleeping) {
        try {
            std::chrono::milliseconds sound_asleep(1500);
            std::this_thread::sleep_for(sound_asleep);
            homer_says(status[while_sleeping]);
        } catch(const char* stirred_awake) {
            std::cout << stirred_awake << std::endl;
        }
    }
    salutation(9,8,7,6,5,4,3,2,1);
    return 0;
}
